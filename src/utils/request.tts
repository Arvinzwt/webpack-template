import axios, { AxiosError, AxiosResponse, AxiosInstance, AxiosRequestConfig} from 'axios';
import { Toast } from 'vant';

const axiosInstance: AxiosInstance = axios.create({
  baseURL: '',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

axiosInstance.interceptors.request.use(
  (config: AxiosRequestConfig) => {
    return config;
  },
  (err: AxiosError) => {
    return Promise.reject(err);
  },
);

// axiosInstance.interceptors.response.use(
//   (respone: AxiosResponse) => {
//     if (respone.data.code !== 200) {
//       Toast(respone.data.message);
//     }
//     return respone;
//   },
//   (err: AxiosError) => {
//     Toast('～ 服务异常,请稍后再试 ～');
//     return Promise.reject(err);
//   },
// );

class Reuqest {
  private axiosInstance: AxiosInstance = axiosInstance;
  public get(url: string, params?: any, headers?: any) {
    return new Promise((resolve, reject) => {
      this.axiosInstance.get(url, { params, headers })
      .then((res: AxiosResponse) => {
        resolve(res.data);
      })
      .catch((err: AxiosError) => {
        reject(err);
      });
    });
  }
  public post(url: string, data?: any, headers?: any) {
    return new Promise(( resolve, reject) => {
      this.axiosInstance.post(url, data, {headers})
      .then((res: AxiosResponse) => {
        resolve(res);
      })
      .catch((err: AxiosError) => {
        reject(err);
      });
    });
  }
}
export default new Reuqest();
